ARM GAS  /tmp/ccrNwonm.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SVC_Handler_C,"ax",%progbits
  16              		.align	1
  17              		.global	SVC_Handler_C
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SVC_Handler_C:
  24              	.LFB66:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccrNwonm.s 			page 2


  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f1xx_it.c **** #include "os.h"
  40:Src/stm32f1xx_it.c **** #include "task.h"
  41:Src/stm32f1xx_it.c **** #include "debug.h"
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** void SVC_Handler_C(unsigned int *svc_args)
  44:Src/stm32f1xx_it.c **** {
  26              		.loc 1 44 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  45:Src/stm32f1xx_it.c ****   unsigned int svc_number;
  46:Src/stm32f1xx_it.c ****   uint32_t stacked_r1;
  47:Src/stm32f1xx_it.c ****   svc_number=((char *)svc_args[6])[-2];
  36              		.loc 1 47 0
  37 0002 8369     		ldr	r3, [r0, #24]
  38 0004 13F8022C 		ldrb	r2, [r3, #-2]	@ zero_extendqisi2
  39              	.LVL1:
  48:Src/stm32f1xx_it.c ****   stacked_r1 = svc_args[1];
  40              		.loc 1 48 0
  41 0008 4368     		ldr	r3, [r0, #4]
  42              	.LVL2:
  49:Src/stm32f1xx_it.c ****   switch (svc_number)
  43              		.loc 1 49 0
  44 000a 012A     		cmp	r2, #1
  45 000c 00D0     		beq	.L5
  46              	.LVL3:
  47              	.L1:
  50:Src/stm32f1xx_it.c ****   {
  51:Src/stm32f1xx_it.c ****     case OS_SVC_SET_TASK_DELAY:
  52:Src/stm32f1xx_it.c ****       taskDelay(stacked_r1 * 72);
  53:Src/stm32f1xx_it.c ****       scheduler();
  54:Src/stm32f1xx_it.c ****       break;
  55:Src/stm32f1xx_it.c ****   }
  56:Src/stm32f1xx_it.c **** }
  48              		.loc 1 56 0
  49 000e 08BD     		pop	{r3, pc}
  50              	.LVL4:
  51              	.L5:
  52:Src/stm32f1xx_it.c ****       scheduler();
  52              		.loc 1 52 0
  53 0010 03EBC303 		add	r3, r3, r3, lsl #3
  54              	.LVL5:
  55 0014 D800     		lsls	r0, r3, #3
  56              	.LVL6:
  57 0016 FFF7FEFF 		bl	taskDelay
  58              	.LVL7:
ARM GAS  /tmp/ccrNwonm.s 			page 3


  53:Src/stm32f1xx_it.c ****       break;
  59              		.loc 1 53 0
  60 001a FFF7FEFF 		bl	scheduler
  61              	.LVL8:
  62              		.loc 1 56 0
  63 001e F6E7     		b	.L1
  64              		.cfi_endproc
  65              	.LFE66:
  67              		.section	.text.NMI_Handler,"ax",%progbits
  68              		.align	1
  69              		.global	NMI_Handler
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu softvfp
  75              	NMI_Handler:
  76              	.LFB67:
  57:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  58:Src/stm32f1xx_it.c **** 
  59:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Src/stm32f1xx_it.c **** 
  61:Src/stm32f1xx_it.c **** /******************************************************************************/
  62:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  63:Src/stm32f1xx_it.c **** /******************************************************************************/
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /**
  66:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  67:Src/stm32f1xx_it.c **** */
  68:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  69:Src/stm32f1xx_it.c **** {
  77              		.loc 1 69 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  70:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  71:Src/stm32f1xx_it.c **** 
  72:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  73:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  74:Src/stm32f1xx_it.c **** 
  75:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  76:Src/stm32f1xx_it.c **** }
  82              		.loc 1 76 0
  83 0000 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE67:
  87              		.section	.text.HardFault_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	HardFault_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
  95              	HardFault_Handler:
  96              	.LFB68:
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c **** /**
ARM GAS  /tmp/ccrNwonm.s 			page 4


  79:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  80:Src/stm32f1xx_it.c **** */
  81:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  82:Src/stm32f1xx_it.c **** {
  97              		.loc 1 82 0
  98              		.cfi_startproc
  99              		@ Volatile: function does not return.
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103              	.L8:
 104 0000 FEE7     		b	.L8
 105              		.cfi_endproc
 106              	.LFE68:
 108              		.section	.text.MemManage_Handler,"ax",%progbits
 109              		.align	1
 110              		.global	MemManage_Handler
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu softvfp
 116              	MemManage_Handler:
 117              	.LFB69:
  83:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  84:Src/stm32f1xx_it.c **** 
  85:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  86:Src/stm32f1xx_it.c ****   while (1)
  87:Src/stm32f1xx_it.c ****   {
  88:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  89:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  90:Src/stm32f1xx_it.c ****   }
  91:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  92:Src/stm32f1xx_it.c **** 
  93:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  94:Src/stm32f1xx_it.c **** }
  95:Src/stm32f1xx_it.c **** 
  96:Src/stm32f1xx_it.c **** /**
  97:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  98:Src/stm32f1xx_it.c **** */
  99:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 100:Src/stm32f1xx_it.c **** {
 118              		.loc 1 100 0
 119              		.cfi_startproc
 120              		@ Volatile: function does not return.
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.L10:
 125 0000 FEE7     		b	.L10
 126              		.cfi_endproc
 127              	.LFE69:
 129              		.section	.text.BusFault_Handler,"ax",%progbits
 130              		.align	1
 131              		.global	BusFault_Handler
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
ARM GAS  /tmp/ccrNwonm.s 			page 5


 135              		.fpu softvfp
 137              	BusFault_Handler:
 138              	.LFB70:
 101:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 102:Src/stm32f1xx_it.c **** 
 103:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 104:Src/stm32f1xx_it.c ****   while (1)
 105:Src/stm32f1xx_it.c ****   {
 106:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 107:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 108:Src/stm32f1xx_it.c ****   }
 109:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 110:Src/stm32f1xx_it.c **** 
 111:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 112:Src/stm32f1xx_it.c **** }
 113:Src/stm32f1xx_it.c **** 
 114:Src/stm32f1xx_it.c **** /**
 115:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 116:Src/stm32f1xx_it.c **** */
 117:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 118:Src/stm32f1xx_it.c **** {
 139              		.loc 1 118 0
 140              		.cfi_startproc
 141              		@ Volatile: function does not return.
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.L12:
 146 0000 FEE7     		b	.L12
 147              		.cfi_endproc
 148              	.LFE70:
 150              		.section	.text.UsageFault_Handler,"ax",%progbits
 151              		.align	1
 152              		.global	UsageFault_Handler
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu softvfp
 158              	UsageFault_Handler:
 159              	.LFB71:
 119:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 120:Src/stm32f1xx_it.c **** 
 121:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 122:Src/stm32f1xx_it.c ****   while (1)
 123:Src/stm32f1xx_it.c ****   {
 124:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 125:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 126:Src/stm32f1xx_it.c ****   }
 127:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 128:Src/stm32f1xx_it.c **** 
 129:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 130:Src/stm32f1xx_it.c **** }
 131:Src/stm32f1xx_it.c **** 
 132:Src/stm32f1xx_it.c **** /**
 133:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 134:Src/stm32f1xx_it.c **** */
 135:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
ARM GAS  /tmp/ccrNwonm.s 			page 6


 136:Src/stm32f1xx_it.c **** {
 160              		.loc 1 136 0
 161              		.cfi_startproc
 162              		@ Volatile: function does not return.
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 166              	.L14:
 167 0000 FEE7     		b	.L14
 168              		.cfi_endproc
 169              	.LFE71:
 171              		.section	.text.SVC_Handler,"ax",%progbits
 172              		.align	1
 173              		.global	SVC_Handler
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu softvfp
 179              	SVC_Handler:
 180              	.LFB72:
 137:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 140:Src/stm32f1xx_it.c ****   while (1)
 141:Src/stm32f1xx_it.c ****   {
 142:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 143:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 144:Src/stm32f1xx_it.c ****   }
 145:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 146:Src/stm32f1xx_it.c **** 
 147:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 148:Src/stm32f1xx_it.c **** }
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c **** /**
 151:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 152:Src/stm32f1xx_it.c **** */
 153:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 154:Src/stm32f1xx_it.c **** {
 181              		.loc 1 154 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		.loc 1 154 0
 186 0000 08B5     		push	{r3, lr}
 187              	.LCFI1:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 3, -8
 190              		.cfi_offset 14, -4
 155:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 156:Src/stm32f1xx_it.c ****   os_enterCritical();
 191              		.loc 1 156 0
 192 0002 FFF7FEFF 		bl	os_enterCritical
 193              	.LVL9:
 157:Src/stm32f1xx_it.c ****   asm volatile ("MOV r1, r0");
 194              		.loc 1 157 0
 195              		.syntax unified
 196              	@ 157 "Src/stm32f1xx_it.c" 1
ARM GAS  /tmp/ccrNwonm.s 			page 7


 197 0006 0146     		MOV r1, r0
 198              	@ 0 "" 2
 158:Src/stm32f1xx_it.c ****     asm volatile (
 199              		.loc 1 158 0
 200              	@ 158 "Src/stm32f1xx_it.c" 1
 201 0008 1EF0040F 		TST     lr, #0x4            
 202 000c 0CBF     		ITE     eq                  
 203 000e EFF30880 		MRSEQ   r0, msp             
 204 0012 EFF30980 		MRSNE   r0, psp             
 205 0016 FFF7FEBF 		B   SVC_Handler_C           
 206              		
 207              	@ 0 "" 2
 159:Src/stm32f1xx_it.c ****       "TST     lr, #0x4            \n\t"
 160:Src/stm32f1xx_it.c ****       "ITE     eq                  \n\t"
 161:Src/stm32f1xx_it.c ****       "MRSEQ   r0, msp             \n\t"
 162:Src/stm32f1xx_it.c ****       "MRSNE   r0, psp             \n\t"
 163:Src/stm32f1xx_it.c ****       "B   SVC_Handler_C           \n\t");
 164:Src/stm32f1xx_it.c **** 
 165:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 166:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 167:Src/stm32f1xx_it.c **** 
 168:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 169:Src/stm32f1xx_it.c **** }
 208              		.loc 1 169 0
 209              		.thumb
 210              		.syntax unified
 211 001a 08BD     		pop	{r3, pc}
 212              		.cfi_endproc
 213              	.LFE72:
 215              		.section	.text.DebugMon_Handler,"ax",%progbits
 216              		.align	1
 217              		.global	DebugMon_Handler
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	DebugMon_Handler:
 224              	.LFB73:
 170:Src/stm32f1xx_it.c **** 
 171:Src/stm32f1xx_it.c **** /**
 172:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 173:Src/stm32f1xx_it.c **** */
 174:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 175:Src/stm32f1xx_it.c **** {
 225              		.loc 1 175 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 176:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 177:Src/stm32f1xx_it.c **** 
 178:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 179:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 180:Src/stm32f1xx_it.c **** 
 181:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 182:Src/stm32f1xx_it.c **** }
 230              		.loc 1 182 0
ARM GAS  /tmp/ccrNwonm.s 			page 8


 231 0000 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE73:
 235              		.section	.text.PendSV_Handler,"ax",%progbits
 236              		.align	1
 237              		.global	PendSV_Handler
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu softvfp
 243              	PendSV_Handler:
 244              	.LFB74:
 183:Src/stm32f1xx_it.c **** 
 184:Src/stm32f1xx_it.c **** /**
 185:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 186:Src/stm32f1xx_it.c **** */
 187:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 188:Src/stm32f1xx_it.c **** {
 245              		.loc 1 188 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 189:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 190:Src/stm32f1xx_it.c **** 
 191:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 192:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 195:Src/stm32f1xx_it.c **** }
 250              		.loc 1 195 0
 251 0000 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE74:
 255              		.section	.text.SysTick_Handler,"ax",%progbits
 256              		.align	1
 257              		.global	SysTick_Handler
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	SysTick_Handler:
 264              	.LFB75:
 196:Src/stm32f1xx_it.c **** 
 197:Src/stm32f1xx_it.c **** /**
 198:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 199:Src/stm32f1xx_it.c **** */
 200:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 201:Src/stm32f1xx_it.c **** {
 265              		.loc 1 201 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269 0000 08B5     		push	{r3, lr}
 270              	.LCFI2:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 3, -8
ARM GAS  /tmp/ccrNwonm.s 			page 9


 273              		.cfi_offset 14, -4
 202:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 203:Src/stm32f1xx_it.c **** 
 204:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 205:Src/stm32f1xx_it.c ****   HAL_IncTick();
 274              		.loc 1 205 0
 275 0002 FFF7FEFF 		bl	HAL_IncTick
 276              	.LVL10:
 206:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 277              		.loc 1 206 0
 278 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 279              	.LVL11:
 207:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 208:Src/stm32f1xx_it.c ****   os_sysTickHandler();
 280              		.loc 1 208 0
 281 000a FFF7FEFF 		bl	os_sysTickHandler
 282              	.LVL12:
 209:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 210:Src/stm32f1xx_it.c **** }
 283              		.loc 1 210 0
 284 000e 08BD     		pop	{r3, pc}
 285              		.cfi_endproc
 286              	.LFE75:
 288              		.text
 289              	.Letext0:
 290              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 291              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 292              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 293              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 294              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 295              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 296              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 297              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 298              		.file 10 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 299              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 300              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 301              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 302              		.file 14 "Inc/debug.h"
 303              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 304              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 305              		.file 17 "Inc/os.h"
 306              		.file 18 "Inc/task.h"
ARM GAS  /tmp/ccrNwonm.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccrNwonm.s:16     .text.SVC_Handler_C:0000000000000000 $t
     /tmp/ccrNwonm.s:23     .text.SVC_Handler_C:0000000000000000 SVC_Handler_C
     /tmp/ccrNwonm.s:68     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:75     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccrNwonm.s:88     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:95     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccrNwonm.s:109    .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:116    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccrNwonm.s:130    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:137    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccrNwonm.s:151    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:158    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccrNwonm.s:172    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:179    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccrNwonm.s:216    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:223    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccrNwonm.s:236    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:243    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccrNwonm.s:256    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccrNwonm.s:263    .text.SysTick_Handler:0000000000000000 SysTick_Handler

UNDEFINED SYMBOLS
taskDelay
scheduler
os_enterCritical
HAL_IncTick
HAL_SYSTICK_IRQHandler
os_sysTickHandler
