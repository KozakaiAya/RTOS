ARM GAS  C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"os_task.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.task_InitTCB,"ax",%progbits
  16              		.align	1
  17              		.global	task_InitTCB
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	task_InitTCB:
  24              	.LFB0:
  25              		.file 1 "Src/os_task.c"
   1:Src/os_task.c **** #include "os_config.h"
   2:Src/os_task.c **** #include "os_task.h"
   3:Src/os_task.c **** 
   4:Src/os_task.c **** task_control_block_t tcb[MAX_TASK_COUNT];
   5:Src/os_task.c **** 
   6:Src/os_task.c **** void task_InitTCB()
   7:Src/os_task.c **** {
  26              		.loc 1 7 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
   8:Src/os_task.c ****     int i;
   9:Src/os_task.c ****     for (i = 0; i < MAX_TASK_COUNT; i++)
  32              		.loc 1 9 0
  33 0000 0023     		movs	r3, #0
  34 0002 05E0     		b	.L2
  35              	.LVL1:
  36              	.L3:
  10:Src/os_task.c ****     {
  11:Src/os_task.c ****         tcb[i].state = TASK_FREE;
  37              		.loc 1 11 0 discriminator 3
  38 0004 044A     		ldr	r2, .L4
  39 0006 02EB0312 		add	r2, r2, r3, lsl #4
  40 000a 0021     		movs	r1, #0
  41 000c 1172     		strb	r1, [r2, #8]
   9:Src/os_task.c ****     {
  42              		.loc 1 9 0 discriminator 3
  43 000e 0133     		adds	r3, r3, #1
  44              	.LVL2:
  45              	.L2:
   9:Src/os_task.c ****     {
ARM GAS  C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s 			page 2


  46              		.loc 1 9 0 is_stmt 0 discriminator 1
  47 0010 032B     		cmp	r3, #3
  48 0012 F7DD     		ble	.L3
  12:Src/os_task.c ****     }
  13:Src/os_task.c **** }
  49              		.loc 1 13 0 is_stmt 1
  50 0014 7047     		bx	lr
  51              	.L5:
  52 0016 00BF     		.align	2
  53              	.L4:
  54 0018 00000000 		.word	tcb
  55              		.cfi_endproc
  56              	.LFE0:
  58              		.section	.text.task_createTSK,"ax",%progbits
  59              		.align	1
  60              		.global	task_createTSK
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu softvfp
  66              	task_createTSK:
  67              	.LFB1:
  14:Src/os_task.c **** 
  15:Src/os_task.c **** uint32_t* task_createTSK(void (*task)(void *), void* args, uint32_t* ptos)
  16:Src/os_task.c **** {
  68              		.loc 1 16 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.LVL3:
  17:Src/os_task.c ****     uint32_t *stk;
  18:Src/os_task.c **** 
  19:Src/os_task.c ****     stk       = ptos;                            /* Load stack pointer                             
  20:Src/os_task.c **** 
  21:Src/os_task.c ****                                                  /* Registers stacked as if auto-saved on exception
  22:Src/os_task.c ****     *(stk)    = (uint32_t)0x01000000uL;            /* xPSR                                         
  74              		.loc 1 22 0
  75 0000 4FF08073 		mov	r3, #16777216
  76 0004 1360     		str	r3, [r2]
  77              	.LVL4:
  23:Src/os_task.c ****     *(--stk)  = (uint32_t)task & 0xfffffffeUL;     /* Entry Point                                  
  78              		.loc 1 23 0
  79 0006 20F00100 		bic	r0, r0, #1
  80              	.LVL5:
  81 000a 42F8040C 		str	r0, [r2, #-4]
  82              	.LVL6:
  24:Src/os_task.c ****     *(--stk)  = (uint32_t)0xFFFFFFFDuL;           /* R14 (LR)                                      
  83              		.loc 1 24 0
  84 000e 6FF00203 		mvn	r3, #2
  85 0012 42F8083C 		str	r3, [r2, #-8]
  86              	.LVL7:
  25:Src/os_task.c ****     *(--stk)  = (uint32_t)0x12121212uL;            /* R12                                          
  87              		.loc 1 25 0
  88 0016 4FF01230 		mov	r0, #303174162
  89 001a 42F80C0C 		str	r0, [r2, #-12]
  90              	.LVL8:
ARM GAS  C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s 			page 3


  26:Src/os_task.c ****     *(--stk)  = (uint32_t)0x03030303uL;            /* R3                                           
  91              		.loc 1 26 0
  92 001e 4FF00330 		mov	r0, #50529027
  93 0022 42F8100C 		str	r0, [r2, #-16]
  94              	.LVL9:
  27:Src/os_task.c ****     *(--stk)  = (uint32_t)0x02020202uL;            /* R2                                           
  95              		.loc 1 27 0
  96 0026 4FF00230 		mov	r0, #33686018
  97 002a 42F8140C 		str	r0, [r2, #-20]
  98              	.LVL10:
  28:Src/os_task.c ****     *(--stk)  = (uint32_t)0x01010101uL;            /* R1                                           
  99              		.loc 1 28 0
 100 002e 4FF00130 		mov	r0, #16843009
 101 0032 42F8180C 		str	r0, [r2, #-24]
 102              	.LVL11:
  29:Src/os_task.c ****     *(--stk)  = (uint32_t)args;                   /* R0 : argument                                 
 103              		.loc 1 29 0
 104 0036 42F81C1C 		str	r1, [r2, #-28]
 105              	.LVL12:
  30:Src/os_task.c **** 
  31:Src/os_task.c ****                                                  /* Remaining registers saved on process stack     
  32:Src/os_task.c ****     *(--stk)  = (uint32_t)0x11111111uL;            /* R11                                          
 106              		.loc 1 32 0
 107 003a 4FF01131 		mov	r1, #286331153
 108              	.LVL13:
 109 003e 42F8201C 		str	r1, [r2, #-32]
 110              	.LVL14:
  33:Src/os_task.c ****     *(--stk)  = (uint32_t)0x10101010uL;            /* R10                                          
 111              		.loc 1 33 0
 112 0042 4FF01031 		mov	r1, #269488144
 113 0046 42F8241C 		str	r1, [r2, #-36]
 114              	.LVL15:
  34:Src/os_task.c ****     *(--stk)  = (uint32_t)0x09090909uL;            /* R9                                           
 115              		.loc 1 34 0
 116 004a 4FF00931 		mov	r1, #151587081
 117 004e 42F8281C 		str	r1, [r2, #-40]
 118              	.LVL16:
  35:Src/os_task.c ****     *(--stk)  = (uint32_t)0x08080808uL;            /* R8                                           
 119              		.loc 1 35 0
 120 0052 4FF00831 		mov	r1, #134744072
 121 0056 42F82C1C 		str	r1, [r2, #-44]
 122              	.LVL17:
  36:Src/os_task.c ****     *(--stk)  = (uint32_t)0x07070707uL;            /* R7                                           
 123              		.loc 1 36 0
 124 005a 4FF00731 		mov	r1, #117901063
 125 005e 42F8301C 		str	r1, [r2, #-48]
 126              	.LVL18:
  37:Src/os_task.c ****     *(--stk)  = (uint32_t)0x06060606uL;            /* R6                                           
 127              		.loc 1 37 0
 128 0062 4FF00631 		mov	r1, #101058054
 129 0066 42F8341C 		str	r1, [r2, #-52]
 130              	.LVL19:
  38:Src/os_task.c ****     *(--stk)  = (uint32_t)0x05050505uL;            /* R5                                           
 131              		.loc 1 38 0
 132 006a 4FF00531 		mov	r1, #84215045
 133 006e 42F8381C 		str	r1, [r2, #-56]
 134              	.LVL20:
ARM GAS  C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s 			page 4


  39:Src/os_task.c ****     *(--stk)  = (uint32_t)0x04040404uL;            /* R4                                           
 135              		.loc 1 39 0
 136 0072 4FF00431 		mov	r1, #67372036
 137 0076 42F83C1C 		str	r1, [r2, #-60]
 138              	.LVL21:
  40:Src/os_task.c ****     *(--stk) = (uint32_t)0x3uL;//CONTROL
 139              		.loc 1 40 0
 140 007a 0321     		movs	r1, #3
 141 007c 42F8401C 		str	r1, [r2, #-64]
 142              	.LVL22:
  41:Src/os_task.c ****     *(--stk) = (uint32_t)0xFFFFFFFDuL; //LR
 143              		.loc 1 41 0
 144 0080 42F8443C 		str	r3, [r2, #-68]
  42:Src/os_task.c **** 
  43:Src/os_task.c ****     return (stk);
  44:Src/os_task.c **** }
 145              		.loc 1 44 0
 146 0084 A2F14400 		sub	r0, r2, #68
 147              	.LVL23:
 148 0088 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE1:
 152              		.section	.text.task_getNextReady,"ax",%progbits
 153              		.align	1
 154              		.global	task_getNextReady
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	task_getNextReady:
 161              	.LFB2:
  45:Src/os_task.c **** 
  46:Src/os_task.c **** int task_getNextReady()
  47:Src/os_task.c **** {
 162              		.loc 1 47 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167              	.LVL24:
  48:Src/os_task.c ****     int i, max_prio, nTsk;
  49:Src/os_task.c **** 
  50:Src/os_task.c ****     max_prio = 0;
  51:Src/os_task.c ****     nTsk = -1;
 168              		.loc 1 51 0
 169 0000 4FF0FF30 		mov	r0, #-1
  50:Src/os_task.c ****     nTsk = -1;
 170              		.loc 1 50 0
 171 0004 0021     		movs	r1, #0
  52:Src/os_task.c ****     for (i = 0;i < MAX_TASK_COUNT; i++)
 172              		.loc 1 52 0
 173 0006 0A46     		mov	r2, r1
 174 0008 00E0     		b	.L8
 175              	.LVL25:
 176              	.L9:
 177              		.loc 1 52 0 is_stmt 0 discriminator 2
 178 000a 0132     		adds	r2, r2, #1
ARM GAS  C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s 			page 5


 179              	.LVL26:
 180              	.L8:
 181              		.loc 1 52 0 discriminator 1
 182 000c 032A     		cmp	r2, #3
 183 000e 10DC     		bgt	.L11
  53:Src/os_task.c ****     {
  54:Src/os_task.c ****         //printf("Task: %d State: %d\n", i, tcb[i].state);
  55:Src/os_task.c ****         if ((tcb[i].state == TASK_READY) || (tcb[i].state == TASK_RUNNING))
 184              		.loc 1 55 0 is_stmt 1
 185 0010 084B     		ldr	r3, .L12
 186 0012 03EB0213 		add	r3, r3, r2, lsl #4
 187 0016 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 188 0018 013B     		subs	r3, r3, #1
 189 001a DBB2     		uxtb	r3, r3
 190 001c 012B     		cmp	r3, #1
 191 001e F4D8     		bhi	.L9
  56:Src/os_task.c ****         {
  57:Src/os_task.c ****             //printf("Prio: %d Max Prio: %d\n", tcb[i].prio, max_prio);
  58:Src/os_task.c ****             if (tcb[i].prio > max_prio)
 192              		.loc 1 58 0
 193 0020 044B     		ldr	r3, .L12
 194 0022 03EB0213 		add	r3, r3, r2, lsl #4
 195 0026 5B68     		ldr	r3, [r3, #4]
 196 0028 8B42     		cmp	r3, r1
 197 002a EED9     		bls	.L9
  59:Src/os_task.c ****             {
  60:Src/os_task.c ****                 max_prio = tcb[i].prio;
 198              		.loc 1 60 0
 199 002c 1946     		mov	r1, r3
 200              	.LVL27:
  61:Src/os_task.c ****                 nTsk = i;
 201              		.loc 1 61 0
 202 002e 1046     		mov	r0, r2
 203 0030 EBE7     		b	.L9
 204              	.LVL28:
 205              	.L11:
  62:Src/os_task.c ****             }
  63:Src/os_task.c ****         }
  64:Src/os_task.c ****     }
  65:Src/os_task.c ****     return nTsk;
  66:Src/os_task.c **** }...
 206              		.loc 1 66 0
 207 0032 7047     		bx	lr
 208              	.L13:
 209              		.align	2
 210              	.L12:
 211 0034 00000000 		.word	tcb
 212              		.cfi_endproc
 213              	.LFE2:
 215              		.comm	tcb,64,4
 216              		.text
 217              	.Letext0:
 218              		.file 2 "d:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 219              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 220              		.file 4 "Inc/os_task.h"
ARM GAS  C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 os_task.c
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:16     .text.task_InitTCB:00000000 $t
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:23     .text.task_InitTCB:00000000 task_InitTCB
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:54     .text.task_InitTCB:00000018 $d
                            *COM*:00000040 tcb
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:59     .text.task_createTSK:00000000 $t
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:66     .text.task_createTSK:00000000 task_createTSK
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:153    .text.task_getNextReady:00000000 $t
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:160    .text.task_getNextReady:00000000 task_getNextReady
C:\Users\Qian\AppData\Local\Temp\ccZVNjqp.s:211    .text.task_getNextReady:00000034 $d

NO UNDEFINED SYMBOLS
